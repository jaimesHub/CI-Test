// - Tính đóng gói (Encapsulation)
/**
 * + Tính chất này không cho phép người dùng trực tiếp tác động đến dữ liệu bên trong đối tượng, 
 * mà phải thông qua các phương thức mà đối tượng cung cấp. Tính chất này đảm bảo tính toàn vẹn của đối tượng.
 * + Cách để thể hiện tính bao đóng:
 * 1. The prefix method / Naming convention:
 * - Sử dụng naming convention, thường là dùng underscore như một tiền tố phía trước tên biến.
 * Ta quy ước, tất cả private values sẽ có tiền tố _ và sẽ không được truy cập một cách trức tiếp.
 * - Ví dụ:
 * class User {
    constructor(name) {
        this._name = name; 
    }
    
    getName() {
        return this._name;
    }
    setName(value) {
        this._name = value;
    }
    _checkNameType(value) {
        if (value && typeof value !== 'string') {
            throw new TypeError('Invalid type of "name"');
        }
    }
}
 * 
 * 
 * 2. Closure:
 * - Sử dụng Closure để thể hiện tính bao đóng, nhằm giữ tính private bằng việc khai báo chúng trong
 * closure của 1 object trong khi object được khởi tạo. Sau đó, việc truy cập vào dữ liệu (data)
 * đươc cài đặt bởi các hàm (functions).
 * - Ví dụ:
 * // Factory based with plain JS object
function User(name) {
    let _name = name;
    
    return {
        getName() {
            return _name;
        },
 
        setName(value) {
            _name = value;
        }
}
// ES6 Class based
class User {
    constructor(name) {
        let _name = name;
        this.getName = () => {
            return _name;
        };
        this.setName = (value) => {
            _name = value;
        };
    }
}
 * 
 * 
 * + Tham khảo:
 * https://medium.com/@ziflex/evolution-of-encapsulation-in-javascript-eb01d3128fae
 * https://www.freecodecamp.org/news/object-oriented-programming-concepts-21bb035f7260/#:~:text=The%20four%20principles%20of%20object,abstraction%2C%20inheritance%2C%20and%20polymorphism.
 * https://medium.com/weekly-webtips/encapsulation-in-javascript-46fa7ea2d5a8
 * 
 * 
 */

// - Tính trừu tượng
/**
 * + Tập trung vào cốt lõi của đối tượng, bỏ qua những thứ không liên quan và không quan trọng.
 * Ví dụ: Bài toán quản lý sinh viên chúng ta cần quản lý những thông tin như: Họ tên, Ngày sinh, Giới tính,...
 * mà không cần quản lý thêm các thông tin: Cân nặng, Màu da, Chiều cao.
 * + Tham khảo: https://codelearn.io/sharing/tat-tan-tat-ve-lap-trinh-huong-doi-tuong-phan-1
 * 
 */
// - Tính đa hình (Polymorphism)
/**
 * + Tính đa hình cho phép các chức năng (method) khác nhau được thực thi khác nhau trên các đối tượng khác nhau
 * trên các đối tượng khác nhau
 * + Ví dụ như class mayvitinh, mỗi dòng máy đều kế thừa từ lớp cha mayvitinh nhưng được chạy với một hệ điều hành
 * khác nhau, mayAsus thì được chạy với hệ điều hành Window, còn mayMacbook sẽ được chạy với hệ điều hành MacOs.
 */
// - Tính kế thừa
/**
 * + Kế thừa, tái sử dụng phương thức, thuộc tính của lớp cơ sở và lớp kế thừa được gọi là lớp con.
 * Nó sẽ thừa hưởng những gì lớp cha có và cho phép.
 * + Ví dụ: class maytinh có các thuộc tính: mausac, chieudai, chieurong.
 * Một class mayAsus, mayAcer sẽ kế thừa class mayvitinh do mayAsus cũng có các thuộc tính: mausac, chieu dai, chieurong.
 * Thay vì sao chép những thuộc tính này, ta nên đặt chúng vào một lớp chung gọi là lớp cha - trong trường hợp này,
 * là maytinh và có những lớp con mayAsus, mayAcer kế thừa từ nó, tạo ra một mối quan hệ cha/con.
 */
